# -*- coding: utf-8 -*-
"""machine-learning-especie-da-flor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ueACnB7cxSg1SHj8DXvlNuv4iBzkOxM-

# Importação de dados

Primeiro, como estou utilizando google colab, subirei o arquivo csv para o ambiente para poder ser acessado pelo notebook:
"""

from google.colab import files
uploaded = files.upload()

"""Agora, basta ler o arquivo para ter acesso aos dados que serão trabalhados"""

import pandas as pd

dataframe = pd.read_csv('Iris.csv')

# print(dataframe)
print('Head: ')
print(dataframe.head())
print('--------------------------------------------------------------------')
print('Describe: ')
print(dataframe.describe())
print('--------------------------------------------------------------------')
print('Info: ')
print(dataframe.info())

"""No campo info observamos que todas as colunas possuem 150 valores non-null, ou seja, todas as flores possuem todos os dados, de forma que não é necessário um pre-tratamento dos dados para treinamento e teste do modelo de ML.

# Treinamento

Agora dividiremos nossa tabela de dados entre os dados específicos de cada flor em 'resources' e os rótulos (espécie da flor) em 'labels'
"""

resources = dataframe[['PetalLengthCm', 'PetalWidthCm', 'SepalLengthCm', 'SepalWidthCm']]
labels = dataframe['Species']

print('Resources: ')
print(resources)
print('--------------------------------------------------------------------')
print('Labels')
print(labels)

"""Agora dividiremos nossas flores entre dados que serão utilizados para treinar o modelo e dados para testar o modelo treinado (90% para treinar e 10% para testar)"""

from sklearn.model_selection import train_test_split

train_size = 0.9  # 90% dos dados serão usados para treinamento

resources_train, resources_test, labels_train, labels_test = train_test_split(resources, labels, test_size=(1 - train_size), random_state=42)

print('Treinamento: ')
print(resources_train)
print('-----------------')
print(labels_train)

print('Teste: ')
print(resources_test)
print('-----------------')
print(labels_test)

"""Agora estamos prontos para o treinamento de um modelo inicial.
O modelo escolhido foi Árvore de Decisão por sua interpretabilidade, capacidade de lidar com relacionamentos não lineares, robustez a outliers, flexibilidade no pré-processamento de dados e habilidade de lidar com variáveis categóricas.
"""

from sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier()
model.fit(resources_train, labels_train)

"""Pronto! Temos um modelo de inteligência artificial capaz de, a partir de dados sobre uma flor, deduzir a qual das 3 espécies ela pertence.

# Métricas

Utilizando o grupo de dados que separamos para testes, podemos medir a precisão do nosso modelo fazendo a previsão de quais são as espécies das flores desse grupo e comparando com seus rótulos (que já possuímos).
"""

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Faça previsões
labels_prediction = model.predict(resources_test)

# Calcule a precisão comparando as labels separadas de antemão com as labels obtidas através das previsões
accuracy = accuracy_score(labels_test, labels_prediction)
print(f'Precisão: {accuracy:.2f}')

print('-------------------------------------------')
print(f'Outras métricas: ')
print(classification_report(labels_test, labels_prediction))
print('-------------------------------------------')
print(f'Matriz de confusão: ')
print(confusion_matrix(labels_test, labels_prediction))

"""# Visualização

A visualização da Árvore de Decisão pode ser uma ferramenta poderosa para entender como o modelo toma decisões. Para isso utilizaremos a biblioteca matplotlib
"""

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(12, 8))
plot_tree(model, filled=True, feature_names= resources.columns, class_names=model.classes_)
plt.title("Árvore de Decisão")
plt.show()

"""As cores nessa visualização tem um significado definido.

1.   Laranja: Iris-setosa
2.   Verde: Iris-versicolor
3.   Roxo: Iris-Virginica

Quanto mais sólida a cor, maior a probabilidade daquela flor ser da espécie definida pela cor.

# Aplicação

Agora que temos um modelo capaz de entender qual a especie de uma dada flor, podemos utilizá-lo na prática para identificar flores encontradas a qualquer momento, basta inputar as medidas da mesma(em cm).
"""

print('Comprimento da sépala:')
sepal_length = input()
sepal_length= float(sepal_length)

print('Largura da sépala:')
sepal_width = input()
sepal_width= float(sepal_width)


print('Comprimento da pétala:')
petal_length = input()
petal_length= float(petal_length)


print('Largura da pétala:')
petal_width = input()
petal_width= float(petal_width)


new_flower = pd.DataFrame({'PetalLengthCm': [petal_length], 'PetalWidthCm': [petal_width], 'SepalLengthCm': [sepal_length], 'SepalWidthCm': [sepal_width]})
predicted_species = model.predict(new_flower)
print(f"A espécie prevista da flor é: {predicted_species[0]}")